package com.junsim.whereami.map;

import java.util.Map;
import java.util.PriorityQueue;

public class RssMap {
    public static final Map<String, Integer> indexMap = Map.ofEntries(
            Map.entry("1C:D1:E0:74:10:4D", 0),
            Map.entry("02:FC:28:AF:0B:FC", 1),
            Map.entry("00:62:EC:FA:AB:C1", 2),
            Map.entry("00:62:EC:FA:AB:CD", 3),
            Map.entry("00:62:EC:FA:AB:CF", 4),
            Map.entry("00:62:EC:E6:32:D1", 5),
            Map.entry("00:62:EC:E6:32:DD", 6),
            Map.entry("00:62:EC:E6:32:DF", 7),
            Map.entry("3A:6C:CB:F5:8D:4A", 8),
            Map.entry("58:86:94:00:CE:5C", 9),
            Map.entry("1C:39:29:18:70:6B", 10),
            Map.entry("1C:39:29:07:37:99", 11),
            Map.entry("1C:D1:E0:25:85:0D", 12),
            Map.entry("1C:D1:E0:25:85:0E", 13),
            Map.entry("1C:D1:E0:25:85:03", 14),
            Map.entry("70:5D:CC:CC:0A:C0", 15),
            Map.entry("70:5D:CC:9F:98:7C", 16),
            Map.entry("A4:88:73:B3:F7:62", 17),
            Map.entry("A4:88:73:B3:F7:6E", 18),
            Map.entry("A4:88:73:B3:F7:6F", 19),
            Map.entry("CC:16:7E:12:D2:1F", 20),
            Map.entry("CC:16:7E:12:D2:1D", 21),
            Map.entry("AC:4A:56:E8:09:02", 22),
            Map.entry("AC:4A:56:E8:09:0F", 23),
            Map.entry("AC:4A:56:E8:09:0E", 24),
            Map.entry("44:E4:D9:84:C8:B1", 25),
            Map.entry("44:E4:D9:84:C8:BF", 26),
            Map.entry("44:E4:D9:84:C8:BD", 27),
            Map.entry("32:CD:A7:BD:D6:B1", 28),
            Map.entry("88:36:6C:79:A0:D4", 29),
            Map.entry("64:E5:99:40:E2:00", 30),
            Map.entry("86:25:19:B6:DE:B8", 31),
            Map.entry("DE:F7:35:D3:E6:66", 32),
            Map.entry("44:E4:D9:84:CA:91", 33),
            Map.entry("90:9F:33:FA:2A:CC", 34),
            Map.entry("5A:86:94:45:49:F0", 35),
            Map.entry("58:86:94:15:49:F0", 36),
            Map.entry("B2:5C:DA:F7:79:A5", 37),
            Map.entry("B0:6E:BF:A7:D2:10", 38),
            Map.entry("B0:6E:BF:A7:D2:14", 39),
            Map.entry("44:E4:D9:84:CA:9D", 40),
            Map.entry("44:E4:D9:84:CA:9F", 41),
            Map.entry("70:5D:CC:C2:DC:60", 42),
            Map.entry("00:62:EC:E6:38:0F", 43),
            Map.entry("90:9F:33:F9:2A:CC", 44),
            Map.entry("00:62:EC:E6:38:0D", 45),
            Map.entry("00:62:EC:E6:35:91", 46),
            Map.entry("00:62:EC:E6:35:9F", 47),
            Map.entry("00:62:EC:E6:38:01", 48),
            Map.entry("1C:D1:E0:74:86:AD", 49),
            Map.entry("1C:D1:E0:74:86:AE", 50),
            Map.entry("1C:D1:E0:74:18:8E", 51),
            Map.entry("1C:D1:E0:74:18:8F", 52),
            Map.entry("DE:03:98:3B:3B:E8", 53),
            Map.entry("1C:D1:E0:74:18:82", 54),
            Map.entry("CA:94:02:FC:55:C1", 55),
            Map.entry("00:62:EC:F6:9E:21", 56),
            Map.entry("00:62:EC:F6:9E:2F", 57),
            Map.entry("70:5D:CC:B2:01:A6", 58),
            Map.entry("26:E8:53:6D:8E:A2", 59),
            Map.entry("58:86:94:0F:0A:26", 60),
            Map.entry("58:86:94:5D:A5:0E", 61),
            Map.entry("44:E4:D9:40:65:01", 62),
            Map.entry("00:62:EC:F6:9E:2D", 63),
            Map.entry("1C:D1:E0:78:00:A3", 64),
            Map.entry("FA:8F:CA:73:F6:5F", 65),
            Map.entry("92:9F:33:C1:54:60", 66),
            Map.entry("44:E4:D9:40:65:0D", 67),
            Map.entry("44:E4:D9:40:65:0F", 68),
            Map.entry("A4:88:73:AD:B6:22", 69),
            Map.entry("A4:88:73:AD:B6:2E", 70),
            Map.entry("CC:16:7E:12:D2:11", 71),
            Map.entry("1C:39:29:07:37:87", 72),
            Map.entry("70:5D:CC:C2:83:9A", 73),
            Map.entry("50:C7:BF:21:D0:C6", 74),
            Map.entry("32:CD:A7:1D:BE:95", 75),
            Map.entry("86:25:19:CD:22:63", 76),
            Map.entry("AE:50:DE:DC:BC:1A", 77),
            Map.entry("00:08:9F:6E:55:BC", 78),
            Map.entry("70:5D:CC:3A:81:0E", 79),
            Map.entry("88:36:6C:58:D5:DC", 80)
    );
    public static final int[][] realMap = {
            {-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1,  1,  1,  1, 1, 1,  1,  1,  1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
            {-1, -1, -1, -1,  1,  1,  1, 1, 1,  1,  1,  1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            {-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};


    public static PriorityQueue<Integer> pq = new PriorityQueue<>();
    public void test() {
        pq.remove(new Object());
    }
    public static Integer[][][] radioMap = new Integer[18][16][81];
    public static int[][] userQueue = new int[81][3];
    public static int queueCount = 0;

}
